<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel= "stylesheet" href="/style.css">
    <title>Images</title>
</head>
<body>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css2?family=Secular+One&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>

    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
          <a class="navbar-brand" href="/">blessedbreath</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="/">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/images">Images</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/about">About</a>
              </li>
            </ul>
          </div>
        </div>
    </nav>

    <div class="page-container">
        <div class="containerOnImages">
            <video autoplay loop muted plays-inline class="background-clip">
                <source src="beautybg.mp4" type="video/mp4">
            </video>

            <div class="ExploreButton">
                <h1>Image Storage</h1>
                <a href="#bottom">Let's Go!</a>
            </div>
        </div>

        <main class="app">
            <div class="header">
                <h2>Upload Images</h2>
                <div class="server-message"></div>
            </div>
            <div class="input-div">
                <p>Drag & Drop Images Here or <span class="browse">Browse</span></p>
                <input type="file" class="file" multiple="multiple" accept="image/png, image/jpeg, image/jpg">
            </div>

            <form id="saved-form">
                <div class="header">
                    <h3>Saved In Server</h3>
                    <button type="submit">Delete</button>
                    </div>
                    <div class="saved-div"></div>
                    </form>
                    <form id="queued-form">
                      <div class="header">
                        <h3>Queued in Frontend</h3>
                        <button type="submit">Upload</button>
                      </div>
                      <div class="queued-div"></div>
                    </form>
                  </main>
              
                  <script>
                    class ImageManager {
                      constructor() {
                        this.queuedImagesArray = [];
                        this.deleteImages = [];
                        this.savedImages = JSON.parse('<%-JSON.stringify(images)%>');
                      }
              
                      displaySavedImages(savedDiv) {
                        let images = "";
                        this.savedImages.forEach((image, index) => {
                          images += `<div class="image">
                                      <img src="http://localhost:3000/${image.image_key}" alt="image">
                                      <span onclick="deleteSavedImage(${index})">&times;</span>
                                    </div>`;
                        });
                        savedDiv.innerHTML = images;
                      }
              
                      deleteSavedImage(index) {
                        this.deleteImages.push(this.savedImages[index].image_key);
                        this.savedImages.splice(index, 1);
                      }
              
                      displayQueuedImages(queuedDiv) {
                        let images = "";
                        this.queuedImagesArray.forEach((image, index) => {
                          images += `<div class="image">
                                      <img src="${URL.createObjectURL(image)}" alt="image">
                                      <span onclick="deleteQueuedImage(${index})">&times;</span>
                                    </div>`;
                        });
                        queuedDiv.innerHTML = images;
                      }
              
                      deleteQueuedImage(index) {
                        this.queuedImagesArray.splice(index, 1);
                      }
              
                      addImagesToQueue(files) {
                        for (let i = 0; i < files.length; i++) {
                          this.queuedImagesArray.push(files[i]);
                        }
                      }
                    }
              
                    const imageManager = new ImageManager();
              
                    const savedForm = document.querySelector("#saved-form");
                    const queuedForm = document.querySelector("#queued-form");
                    const savedDiv = document.querySelector('.saved-div');
                    const queuedDiv = document.querySelector('.queued-div');
                    const inputDiv = document.querySelector('.input-div');
                    const input = document.querySelector('.input-div input');
                    const serverMessage = document.querySelector('.server-message');
              
                    if (imageManager.savedImages) {
                      imageManager.displaySavedImages(savedDiv);
                    }
              
                    savedForm.addEventListener("submit", (e) => {
                          e.preventDefault();
                          deleteImagesFromServer();
                        });

                        async function deleteImagesFromServer() {
                          try {
                            if (imageManager.deleteImages.length === 0) {
                              serverMessage.innerHTML = "No images selected for deletion.";
                              serverMessage.style.cssText = "background-color: #f8d7da; color:#b71c1c";
                              return;
                            }

                            const response = await fetch("delete", {
                              method: "PUT",
                              headers: {
                                "Accept": "application/json, text/plain, */*",
                                "Content-type": "application/json"
                              },
                              body: JSON.stringify({ deleteImages: imageManager.deleteImages })
                            });

                            if (!response.ok) {
                              throw new Error(response.statusText);
                            }

                            imageManager.deleteImages = [];
                            serverMessage.innerHTML = "Images deleted successfully.";
                            serverMessage.style.cssText = "background-color: #d4edda; color:#1b5e20";
                          } catch (error) {
                            serverMessage.innerHTML = `Error: ${error.message}`;
                            serverMessage.style.cssText = "background-color: #f8d7da; color:#b71c1c";
                          }
                        }


              
                    input.addEventListener("change", () => {
                      const files = input.files;
                      imageManager.addImagesToQueue(files);
                      queuedForm.reset();
                      imageManager.displayQueuedImages(queuedDiv);
                    });
              
                    inputDiv.addEventListener("drop", (e) => {
                      e.preventDefault();
                      e.stopPropagation();
        const files = e.dataTransfer.files;
        imageManager.addImagesToQueue(files);
        imageManager.displayQueuedImages(queuedDiv);
      });

      inputDiv.addEventListener("dragover", (e) => {
        e.preventDefault();
        e.stopPropagation();
      });

      inputDiv.addEventListener("dragleave", (e) => {
        e.preventDefault();
        e.stopPropagation();
      });

      inputDiv.addEventListener("click", (e) => {
        e.stopPropagation();
        if (e.target !== input) {
          input.click();
        }
      });


      queuedForm.addEventListener("submit", (e) => {
        e.preventDefault();
        uploadImagesToServer();
      });

      function uploadImagesToServer() {
        const formData = new FormData();
        imageManager.queuedImagesArray.forEach((image) => {
          formData.append("images", image);
        });

        fetch("upload", {
          method: "POST",
          body: formData
        })
          .then(response => {
            if (response.status !== 200) throw Error(response.statusText);
            imageManager.queuedImagesArray = [];
            queuedDiv.innerHTML = "";
            serverMessage.innerHTML = response.statusText;
            serverMessage.style.cssText = "background-color: #d4edda; color:#1b5e20";
          })
          .catch(error => {
            serverMessage.innerHTML = error;
            serverMessage.style.cssText = "background-color: #f8d7da; color:#b71c1c";
          });
      }

      function deleteSavedImage(index) {
        imageManager.deleteSavedImage(index);
        imageManager.displaySavedImages(savedDiv);
      }

      function deleteQueuedImage(index) {
        imageManager.deleteQueuedImage(index);
        imageManager.displayQueuedImages(queuedDiv);
      }

      window.deleteSavedImage = deleteSavedImage;
      window.deleteQueuedImage = deleteQueuedImage;
    </script>
</div>
<div id="bottom"></div>
</body>
</html>
